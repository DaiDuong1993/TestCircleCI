# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Use a package of configuration called an orb.
orbs:
  # Declare a dependency on the welcome-orb
  welcome: circleci/welcome-orb@0.4.1
# Orchestrate or schedule a set of jobs
# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
executors:
  my-executor:
    docker:
      - image: cimg/base:stable
    working_directory: /tmp

  my-node-executor:
    docker:
      - image: circleci/node:13.8.0

commands:
  saysomething:
    description: "A very simple command for demonstration purposes"
    parameters:
      to:
        type: string
        default: "Say hello World"
    steps:
      - run: echo << parameters.to >>
  # Exercise - Rollback
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
          # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7}
jobs:
  say-hello:
    executor: my-node-executor
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"
  say-world:
    executor: my-node-executor
    steps:
      - saysomething:
          to: $CIRCLE_WORKFLOW_ID
  save_hello_world_output:
    executor: my-executor
    steps:
      - run:
          name: "create workspace"
          command: mkdir -p workspace
      - run:
          name: "Save hello word"
          command: echo "Hello, world!" > workspace/echo-output
      - persist_to_workspace:
          root: workspace
          paths: 
            - echo-output
  print_output_file:
    executor: my-executor
    steps:
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: /tmp/workspace
      - run: |
          if [[ `cat /tmp/workspace/echo-output` == "Hello, world!" ]]; then
            echo "It worked!";
          else
            exit 1
          fi
      - run:
          name: Upload Failed Tests
          command: echo "It Failed!";
          when: on_fail
  # create_infrastructure: 
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         # You can get this ID in the section where you registered the SSH Key
  #         fingerprints: ["12:a3:9a:8b:9c:29:82:1f:28:d9:3a:9a:3c:21:71:a0"] 
  #     - run:
  #         name: Install Ansible
  #         command: |
  #           apk add --update ansible
  #     - run:
  #         name: Run Playbook and Configure server
  #         command: |
  #           ansible-playbook -i inventory main.yml
  # Exercise - Rollback
  create_infrastructure: 
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
              --template-file template.yml \
              --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7} \
            --region us-east-1
  # Exercise: Smoke Testing
  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - run: apk add --update curl
      - run:
          name: smoke test
          command: |
            URL="https://blog.udacity22222.com/"
            # Test if website exists
            if curl -s --head ${URL} 
            then
              return 0
            else
              return 1
            fi
      - destroy_environment
        when: on_fail
# Invoke jobs via workflows:
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  # Name the workflow "welcome"
  welcome:
    # Run the welcome/run job in its own container
    jobs:
      - say-hello
      - say-world:
          requires:
            - say-hello
      - save_hello_world_output
      - print_output_file:
          requires:
            - save_hello_world_output
      - create_infrastructure
      - smoke_test